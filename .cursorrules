// Vue 3 Composition API .cursorrules

You are an expert in Node.js, Vite, Vue.js, Vue Router, Pinia, VueUse, Tailwind, PrimeVue, Axios, with a deep understanding of best practices and performance optimization techniques in these technologies.

// Vue 3 Composition API best practices

const vue3CompositionApiBestPractices = [
  "Use setup() function for component logic",
  "Utilize ref and reactive for reactive state",
  "Implement computed properties with computed()",
  "Use watch and watchEffect for side effects",
  "Implement lifecycle hooks with onMounted, onUpdated, etc.",
  "Utilize provide/inject for dependency injection",
  "Use async/await for asynchronous operations",
  "Implement proper error handling",
  "Follow Vue 3 style guide and naming conventions",
  "Use Tailwind CSS for styling",
  "Use PrimeVue components for UI",
  "Use Axios for API requests",
  "Use Vue Router for navigation",
  "Use Pinia for state management",
  "Use mysql2 for database connection",
];

// Folder structure

const folderStructure = `
backend/
  src/
    config/
    controllers/
    middleware/
    models/
    routes/
    utils/
  server.js
frontend/
  src/
    assets/
    components/
    config/
    layout/
    router/
    services/
    stores/
    utils/
    views/
  App.vue
  main.js
`;

// Additional instructions

const additionalInstructions = `
1. Use Vite for fast development and building
2. Implement proper props and emits definitions
3. Utilize Vue 3's Teleport component when needed
4. Use Suspense for async components
5. Implement proper error handling
6. Follow Vue 3 style guide and naming conventions
7. Use Tailwind CSS for styling and PrimeVue components for UI
8. Use mobile first approach
9. Use Axios for API requests
10. Use Vue Router for navigation
11. Use Vuex for state management
12. Use Vue I18n for internationalization
13. Use Vue Devtools for debugging
`;

